# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta

"""Network utility module.

Define functions for network.
"""


import re

from iobase.exception import (InvalidArgError)


def is_inet4_addr(addr):
    """Return if "addr" is inet4 family address.
       Note:
           This function only guess if the address is for inet4 and
           don't warrant "addr" is correct.
    """

    INET4_ADDR_RE = "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"

    try:
        if re.match(INET4_ADDR_RE, addr):
            return True
    except:
        pass

    return False


def is_inet6_addr(addr):
    """Return if "addr" is inet6 family address.
       Note:
           This function only guess if the address is for inet6 and
           don't warrant "addr" is correct.
    """

    INET6_ADDR_RE = "[0-9a-fA-F:]+:[0-9a-fA-F:]*:[0-9a-fA-F:]+$"

    try:
        if re.match(INET6_ADDR_RE, addr):
            return True
    except:
        pass

    return False


def get_host_and_port(host_and_port):
    """Return the host and port tuple from "host_and_port".
        host is hostname or IP address.
    """

    HOST_IPV4_WITH_PORT_RE = "([^:]*)(: *)([0-9]+) *$"
    IPV6_WITH_PORT_RE = " *\[ *([0-9a-fA-F:]*) *\]( *: *)([0-9]+) *$"
    IPV6_RE = " *\[? *([0-9a-fA-F:]*) *\]? *$"
    HOST_IPV4_RE = "([^:]*)$"

    for re_str in (HOST_IPV4_WITH_PORT_RE, IPV6_WITH_PORT_RE,
                    IPV6_RE, HOST_IPV4_RE):
        match = re.match(re_str, host_and_port)

        if match == None:
            continue

        if len(match.groups()) >= 3:
            return (match.group(1).strip(), match.group(3).strip())

        return (match.group(1).strip(), "")

    raise InvalidArgError(host_and_port)
