# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta
import xml.dom.minidom

class sharelistitem:
    b_readonly = False
    i_uid = 0
    i_gid = 0

class rapssharelist:

    c_comm = None
    c_list = {}
    s_user = ""
    s_pass = ""
    s_domain = ""

    def __init__(self, comm):
        '''
        Constructor
        '''
        self.c_comm = comm
        self.s_timelimit_key = ""
        self.s_clientid = ""

    def parse(self, strXml):
        '''
        sharelist xml parser
        '''

        # workaround for mod_python
        self.c_list = {}
        self.s_user = ""
        self.s_pass = ""
        self.s_domain = ""

        # parse
        try:
            dom = xml.dom.minidom.parseString( strXml )
            # user name
            user_nd = dom.getElementsByTagName("user")
            if user_nd.length > 0:
                try:
                    self.s_domain = user_nd[0].getAttribute("domain")
                except:
                    pass
                try:
                    self.s_user = user_nd[0].getElementsByTagName("name")[0].childNodes[0].data
                except:
                    pass
                try:
                    self.s_pass = user_nd[0].getElementsByTagName("password")[0].childNodes[0].data
                except:
                    pass
            # clientid
            try:
                self.s_clientid = dom.getElementsByTagName("clientid")[0].childNodes[0].data
            except:
                pass
            # timelimitkey
            try:
                self.s_timelimit_key = dom.getElementsByTagName("timelimitkey")[0].childNodes[0].data
            except:
                pass
            
            # sharelist
            list_nd = dom.getElementsByTagName("share")
            for node in list_nd:
                try:
                    b_readonly = False
                    i_uid = 0
                    i_gid = 0
                    # path
                    s_name = node.getElementsByTagName("name")[0].childNodes[0].data
                    s_name = self._getParentPath(s_name).encode( "utf-8" )
                    # read only
                    b_work = node.getAttribute("readonly")
                    if len(b_work) > 0:
                        if b_work.lower() == "true":
                            b_readonly = True
                        else:
                            b_readonly = False
                    else:
                        b_readonly = False

                    b_work = node.getAttribute("uid")
                    if len(b_work) > 0:
                        try:
                            i_uid = int(b_work)
                        except:
                            pass

                    b_work = node.getAttribute("gid")
                    if len(b_work) > 0:
                        try:
                            i_gid = int(b_work)
                        except:
                            pass

                    c_item = sharelistitem()
                    c_item.b_readonly = b_readonly
                    c_item.i_uid = i_uid
                    c_item.i_gid = i_gid
                    self.c_list[s_name] = c_item

                except:
                    pass
        except:
            pass

        # return
        return len(self.c_list)

    def isFound(self, path):
        '''
        check write Authority
        '''
        b_ret  = False
        s_name = self._getParentPath(path) 
        try:
            self.c_list[s_name]
            b_ret  = True
        except:
            pass
        
        return b_ret
    
    def isWrite(self, path):
        '''
        check write Authority
        '''
        b_ret = False
        s_name = self._getParentPath(path) 
        try:
            c_item = self.c_list[s_name]
            if c_item.b_readonly == False:
                b_ret = True
        except:
            pass
        
        return b_ret

    def getuser(self):
        '''
        get user name
        '''
        return self.s_user

    def getpassword(self):
        '''
        get user password
        '''
        return self.s_pass

    def setpassword(self, password):
        '''
        set user password
        '''
        self.s_pass = password
        
        return

    def set_timelimit_key(self, key):
        '''
        set timelimit key
        '''
        self.s_timelimit_key = key
        
        return

    def get_timelimit_key(self):
        '''
        get timelimit key
        '''
        return self.s_timelimit_key

    def set_clientid(self, clientid):
        '''
        set clientid key
        '''
        self.s_clientid = clientid
        
        return

    def get_clientid(self):
        '''
        get clientid key
        '''
        return self.s_clientid

    def getuid(self, path):
        '''
        get user id
        '''
        i_ret = 0
        s_name = self._getParentPath(path) 
        try:
            c_item = self.c_list[s_name]
            i_ret = c_item.i_uid
        except:
            pass
        
        return i_ret

    def getgid(self, path):
        '''
        get group id
        '''
        i_ret = 0
        s_name = self._getParentPath(path) 
        try:
            c_item = self.c_list[s_name]
            i_ret = c_item.i_gid
        except:
            pass
        
        return i_ret

    def makeSession(self):
        '''
        make session data
        '''
        strSession = ""
        try:
            strSession += "<session>\n"
            if self.s_domain == "":
                strSession += " <user>\n"
            else:
                strSession += " <user domain=\x22"
                strSession += self.s_domain
                strSession += "\x22>\n"
            strSession += "  <name>"
            strSession += self.c_comm.Escape(self.s_user)
            strSession += "</name>\n"
            strSession += "  <password>"
            strSession += self.c_comm.Escape(self.s_pass)
            strSession += "</password>\n"
            strSession += " </user>\n"
            strSession += " <clientid>"
            strSession += self.c_comm.Escape(self.s_clientid)
            strSession += "</clientid>\n"
            strSession += " <timelimitkey>"
            strSession += self.c_comm.Escape(self.s_timelimit_key)
            strSession += "</timelimitkey>\n"
            strSession += " <sharelist>\n"
            for item in  sorted(self.c_list.items()):
                strSession += "  <share"
                c_item = item[1]
                if c_item.b_readonly == True:
                    strSession += " readonly=\x22true\x22"
                try:
                    i_uid = c_item.i_uid
                    strSession += " uid=\x22"
                    strSession += str(i_uid)
                    strSession += "\x22"
                except:
                    pass
                try:
                    i_gid = c_item.i_gid
                    strSession += " gid=\x22"
                    strSession += str(i_gid)
                    strSession += "\x22"
                except:
                    pass
                strSession += ">"
                strSession += "<name>"
                strSession += self.c_comm.Escape(item[0])
                strSession += "</name></share>\n"
            strSession += " </sharelist>\n"
            strSession += "</session>\n"
        except:
            strSession = ""
        
        return strSession

    def makeContent(self):
        '''
        make content
        '''
        strContent = ""
        try:
            strContent += " <sharelist>\n"
            for item in  sorted(self.c_list.items()):
                strContent += "  <share"
                c_item = item[1]
                if c_item.b_readonly == True:
                    strContent += " readonly=\x22true\x22"
                strContent += ">"
                strContent += "<name>"
                strContent += self.c_comm.Escape(item[0])
                strContent += "</name></share>\n"
            strContent += " </sharelist>"
        except:
            strContent = ""
        
        return strContent

    def _getParentPath(self, path):
        '''
        get parent name
        '''
        s_path = path.strip( "/" )
        s_name = s_path.split( "/" )[0]
        
        return s_name 
