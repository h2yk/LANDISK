# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta
import sys
import re
import codecs
import xml.dom.minidom
import rapscomm
import rapsexcept

class rapsrequest:

    c_comm = None

    def __init__(self, comm):
        '''
        Constructor
        '''
        self.c_comm = comm
        
    def parse(self):
        '''
        request xml parser
        '''
        # init
        ret_d   = dict()
        enc_t   = "utf-8"
        b_utf16 = False
        request = ""

        ret_d["encode"] = ""
        ret_d["bom"] = ""

        # request read
        enc_t, bom, buff = self._read_request()
        if buff == "":
            return ret_d

        # debug
        self.c_comm.logout("*** request ***")
        self.c_comm.logout("\n"+buff)

        # get encoding
        if enc_t.startswith("utf-16") == False:
            # get encoding
            strMeta = self._getMetaData(buff)
            if len(strMeta) > 0:
                # get encode
                strEnc = self._getEncode(strMeta)
                if len(strEnc) > 0:
                    enc_t = strEnc

            # meta data check
            try:
                head = self._getHeadData(buff)
                head = head.replace(enc_t, "utf-8")
                if len(head) > 0:
                    head += "<test/>"
                    dom = xml.dom.minidom.parseString(head)
            except Exception ,e:
                raise rapsexcept.ParseError(str(e))

        ret_d["bom"] = bom
        ret_d["encode"] = enc_t

        if (enc_t.lower() in rapscomm.enable_encode) == False:
            raise LookupError("appointed encoding has not corresponded.")

        # decode
        try:
            request = buff.decode(enc_t)
        except LookupError:
            raise
        except Exception ,e:
            request = buff

        # remove meta data
        request = self._removeMetaData(request)
  
        # remove cr+lf 
        request = request.rstrip("\n")
        request = request.rstrip("\r")
 
        # parse
        try:
            dom = xml.dom.minidom.parseString( request )
        except Exception ,e:
            raise rapsexcept.ParseError(str(e))

        # parse
        try:
            req_nd = dom.getElementsByTagName("request")
            if req_nd.length > 0:
                ret_d["type"]    = req_nd[0].getAttribute("type")
                ret_d["session"] = req_nd[0].getAttribute("session")
                ret_d["addlen"]  = req_nd[0].getAttribute("addlen")
            
            # option 
            reqType = self.getvalue(ret_d, "type")
            if reqType == "auth":
                usr_nd = req_nd[0].getElementsByTagName("user")
                if usr_nd.length > 0:
                    ret_d["domain"] = usr_nd[0].getAttribute("domain")
                    itm_nd = usr_nd[0].getElementsByTagName("name")
                    try:
                        if itm_nd.length > 0:
                            if itm_nd[0].hasChildNodes():
                                ret_d["name"] = itm_nd[0].childNodes[0].data
                    except:
                        pass
                    itm_nd = usr_nd[0].getElementsByTagName("password")
                    try:
                        if itm_nd.length > 0:
                            if itm_nd[0].hasChildNodes():
                                ret_d["password"] = itm_nd[0].childNodes[0].data
                    except:
                        pass

                    itm_nd = usr_nd[0].getElementsByTagName("clientid")
                    try:
                        if itm_nd.length > 0:
                            if itm_nd[0].hasChildNodes():
                                ret_d["clientid"] = itm_nd[0].childNodes[0].data
                    except:
                        pass

                    itm_nd = usr_nd[0].getElementsByTagName("key")
                    try:
                        if itm_nd.length > 0:
                            if itm_nd[0].hasChildNodes():
                                ret_d["key"] = itm_nd[0].childNodes[0].data
                    except:
                        pass

            elif reqType == "getdir" or reqType == "find":
                path_nd = req_nd[0].getElementsByTagName("path")
                try:
                    if path_nd.length > 0:
                        if path_nd[0].hasChildNodes():
                            ret_d["path"] = path_nd[0].childNodes[0].data
                except:
                    pass
                opt_nd = req_nd[0].getElementsByTagName("option")
                if opt_nd.length > 0:
                    ret_d["index"]  = opt_nd[0].getAttribute("index")
                    ret_d["maxnum"] = opt_nd[0].getAttribute("maxnum")
                    regex = opt_nd[0].getAttribute("regex")
                    if regex == "":
                        regex=".*"
                    ret_d["regex"] = regex
                    ret_d["sort"] = opt_nd[0].getAttribute("sort")
                    ret_d["reverse"] = opt_nd[0].getAttribute("reverse")
                    stm_nd = opt_nd[0].getElementsByTagName("statitemlist")
                    if stm_nd.length > 0:
                        lst = list()
                        itm_nd = stm_nd[0].getElementsByTagName("item")
                        for item in itm_nd:
                            try:
                                if item.hasChildNodes():
                                    s_name = item.childNodes[0].data.lower()
                                    lst.append( s_name )
                                    if s_name == "mtime":
                                        try:
                                            ret_d["precision"] = item.getAttribute("precision")
                                        except:
                                            pass
                            except:
                                pass
                        
                        ret_d["statitemlist"] = lst
    
            elif reqType == "mkdir" or reqType == "getmminfo" or reqType == "delete":
                path_nd = req_nd[0].getElementsByTagName("path")
                try:
                    if path_nd.length > 0:
                        if path_nd[0].hasChildNodes():
                            ret_d["path"] = path_nd[0].childNodes[0].data
                except:
                    pass

            elif reqType == "getresizedimage":
                path_nd = req_nd[0].getElementsByTagName("path")
                try:
                    if path_nd.length > 0:
                        if path_nd[0].hasChildNodes():
                            ret_d["path"] = path_nd[0].childNodes[0].data
                except:
                    pass
                path_nd = req_nd[0].getElementsByTagName("width")
                try:
                    if path_nd.length > 0:
                        if path_nd[0].hasChildNodes():
                            ret_d["width"] = path_nd[0].childNodes[0].data
                except:
                    pass
                path_nd = req_nd[0].getElementsByTagName("height")
                try:
                    if path_nd.length > 0:
                        if path_nd[0].hasChildNodes():
                            ret_d["height"] = path_nd[0].childNodes[0].data
                except:
                    pass

            elif reqType == "move" or reqType == "copy":
                path_nd = req_nd[0].getElementsByTagName("path")
                for node in path_nd:
                    b_dest = node.getAttribute("dest")
                    if len(b_dest) > 0:
                        if b_dest.lower() == "true":
                            if node.hasChildNodes():
                                ret_d["dest"] = node.childNodes[0].data
                        else:
                            if node.hasChildNodes():
                                ret_d["path"] = node.childNodes[0].data
                    else:
                        if node.hasChildNodes():
                            ret_d["path"] = node.childNodes[0].data

            elif reqType == "download":
                path_nd = req_nd[0].getElementsByTagName("path")
                if path_nd.length > 0:
                    if path_nd[0].hasChildNodes():
                        ret_d["path"] = path_nd[0].childNodes[0].data
                opt_nd = req_nd[0].getElementsByTagName("option")
                if opt_nd.length > 0:
                    ret_d["offset"]  = opt_nd[0].getAttribute("offset")
                    ret_d["maxsize"] = opt_nd[0].getAttribute("maxsize")

            elif reqType == "upload":
                path_nd = req_nd[0].getElementsByTagName("path")
                if path_nd.length > 0:
                    if path_nd[0].hasChildNodes():
                        ret_d["path"] = path_nd[0].childNodes[0].data
                opt_nd = req_nd[0].getElementsByTagName("option")
                if opt_nd.length > 0:
                    ret_d["offset"]    = opt_nd[0].getAttribute("offset")
                    ret_d["mtime"]     = opt_nd[0].getAttribute("mtime")
                    ret_d["overwrite"] = opt_nd[0].getAttribute("overwrite")

            elif reqType == "geturl":
                path_nd = req_nd[0].getElementsByTagName("path")
                if path_nd.length > 0:
                    if path_nd[0].hasChildNodes():
                        ret_d["path"] = path_nd[0].childNodes[0].data
                opt_nd = req_nd[0].getElementsByTagName("option")
                if opt_nd.length > 0:
                    ret_d["protocol"]  = opt_nd[0].getAttribute("protocol")
                    ret_d["expire"] = opt_nd[0].getAttribute("expire")

            elif reqType == "disableurl":
                path_nd = req_nd[0].getElementsByTagName("url")
                if path_nd.length > 0:
                    if path_nd[0].hasChildNodes():
                        ret_d["url"] = path_nd[0].childNodes[0].data

        except:
            raise

        return ret_d
    
    def getvalue(self, dicItem, strKey):
        '''
        get dictionary value.
        '''
        retValue = ""
        try:
            retValue = dicItem[strKey].encode( "utf-8" )
        except: 
            pass
       
        try:
            retValue = retValue.strip()
        except: 
            pass 

        return retValue

    def getdata(self, dicItem, strKey):
        '''
        get list value.
        '''
        retValue = ""
        try:
            retValue = dicItem[strKey]
        except: 
            pass
        return retValue

    def getnum(self, dicItem, strKey):
        '''
        from dictionary It Changes numeric.
        '''
        retValue = 0
        try:
            retValue = int(dicItem[strKey])
        except: 
            pass
        return retValue

    def _read_request(self):
        '''
        read request
        '''
        buff = ""
        bom  = ""
        enc  = "utf-8"
        rdb  = 1
        lfc  = 0

        # bom check
        try:
            buff = sys.stdin.read(4)
            if buff[0:2] == "\xff\xfe":
                # little endian
                enc   = "utf-16le"
                rdb   = 2
                bom   = "\xff\xfe"
                buff  = buff[2:]
            if buff[0:2] == "\x3c\x00":
                # little endian
                enc   = "utf-16le"
                rdb   = 2
            elif buff[0:2] == "\xfe\xff":
                # big endian
                enc   = "utf-16be"
                rdb   = 2
                bom   = "\xfe\xff"
                buff  = buff[2:]
            elif buff[0:2] == "\x00\x3c":
                # big endian
                enc   = "utf-16be"
                rdb   = 2
            elif buff[0:3] == "\xef\xbb\xbf":
                # utf-8 bom
                bom  = "\xef\xbb\xbf"
                buff = buff[3:]
        except:
            return enc.lower(), bom, buff

        while True:
            line = sys.stdin.readline()
            if not line:
                break
            if line.rstrip("\r\n").endswith(codecs.BOM_BE):
                buff += line.rstrip("\r\n").replace(codecs.BOM_BE, "")
                break
            buff += line

        return enc, bom, buff

    def _isMetaData(self, buff):
        '''
        isMetaData
        '''
        # initalize
        retCode = False

        # Investigation meta data
        meta_h = re.search("<\?xml(.+)\?>", buff, re.IGNORECASE)
        if meta_h != None:
            retCode = True
        else:
            retCode = False

        return retCode

    def _getHeadData(self, buff):
        '''
        get header data
        '''
        
        # initalize
        head = buff
        head = head.replace('\r', '')
        head = head.replace('\n', ' ')
        head = head.lower()
        endp = head.find("<request") 
        if endp > 0:
            head = head[0:endp]
        else:
            head = ""

        return head

    def _getMetaData(self, buff):
        '''
        get MetaData
        '''
        meta = ""

        # initalize
        head = self._getHeadData(buff)

        # Investigation meta data
        meta_h = re.search("<\?xml(.+)\?>", head, re.IGNORECASE)
        if meta_h != None:
            meta = meta_h.group(1) 

        return meta

    def _getEncode(self, buff):
        '''
        get encoding
        '''
        retEnc = ""

        # Investigation meta data
        buff = buff.replace( "\r", "" )
        buff = buff.replace( "\n", " " )
        buff = buff.replace( "\t", " " )
        meta_h = re.search("encoding\s*=\s*\x22([\w\s-]+)\x22", buff, re.IGNORECASE)
        if meta_h != None:
            retEnc = meta_h.group(1) 
        else:
            meta_h = re.search("encoding\s*=\s*\x27([\w\s-]+)\x27", buff, re.IGNORECASE)
            if meta_h != None:
                retEnc = meta_h.group(1) 

        return retEnc

    def _removeMetaData(self, buff):
        '''
        removeMetaData
        '''
        _buff =  buff 
        _buff = _buff.lower()
        _startp = _buff.find("<request") 
        if _startp >= 0:
            _buff = buff[_startp:]
        else:
            _buff = ""

        return _buff
