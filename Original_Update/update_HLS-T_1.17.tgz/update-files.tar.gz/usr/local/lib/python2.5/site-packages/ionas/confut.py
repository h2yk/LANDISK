# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta

"""Configuration file utility module.

Define functions for configuration file.
"""


from __future__ import with_statement

import os
import glob

_ANY_GLOB = "*"
_BUF_SIZE = 32 * 1024


def __try_create_symlink(src_base_glob, suffix_list, setting_dir):
    """Try creating symblic link file in "setting_dir"."""

    for suffix in tuple(suffix_list) + ("",):
        found_list = glob.glob(src_base_glob + suffix)
        if not len(found_list):
            continue
        link_base = os.path.basename(found_list[0])
        if len(suffix):
            link_base = link_base[0:-1 * len(suffix)]

        link_name = os.path.join(setting_dir, link_base)
        if os.path.exists(link_name):
            os.remove(link_name)

        os.symlink(found_list[0], link_name)
        return


def __try_delete_symlinks(file_glob, setting_dir):
    """Try deleteing symblic link files in "setting_dir"."""

    for found in glob.glob(os.path.join(setting_dir, file_glob)):
        if os.path.islink(found):
            os.remove(found)


def __cat_file(dest_obj, file_name):
    """Write "file_name" file contents to "dest_obj" file object."""

    with open(file_name) as fobj:
        while True:
            data = fobj.read(_BUF_SIZE)
            if not len(data):
                return
            dest_obj.write(data)


def __cat_all_setting(conf_name, setting_list):
    """Concatenate contents in "setting_list" files and write it
       to "conf_name" file.
    """

    with open(conf_name, "w") as conf_file:
        for setting in setting_list:
            __cat_file(conf_file, setting)


def enable_setting(file_list, suffix_list, src_dir, setting_dir):
    """For each file in "file_list", create symblic link in "setting_dir"
       to file of which suffix is specified by "suffix_list" in "src_dir".
       Unix shell-style wildcards can be used in "file_list".
       Note: suffix in "suffix_list must start with "." if necessary.
    """

    for file_base in file_list:
        __try_create_symlink(os.path.join(src_dir, file_base),
                suffix_list, setting_dir)


def disable_setting(file_list, setting_dir):
    """Remove a symblic link specified by "file_list" in "setting_dir".
       Unix shell-style wildcards can be used in "file_list".
    """

    for file_base in file_list:
        __try_delete_symlinks(file_base, setting_dir)


def build_config_file(config_path, setting_dir_or_list):
    """Build configuration file "config_path" by concatenating files in
       "setting_dir_or_list" directory or "setting_dir_or_list" list.
    """

    if isinstance(setting_dir_or_list, (str, unicode)):
        setting_list = glob.glob(os.path.join(setting_dir_or_list, _ANY_GLOB))
        setting_list = sorted(setting_list)
    else:
        setting_list = setting_dir_or_list

    config_temp_name = config_path + "." + str(os.getpid())
    try:
        __cat_all_setting(config_temp_name, setting_list)

        try:
            os.remove(config_path)
        except:
            pass
        os.rename(config_temp_name, config_path)
    except:
        if os.path.exists(config_temp_name):
            os.remove(config_temp_name)
        raise
