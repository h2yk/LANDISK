# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta

"""Module to access the server with REST API."""


class NeedToRetry(Exception):
    """Represents that it is need to retry."""

    def __init__(self, request_info):
        """Constructor."""

        self.request_info = request_info

    def get_request_info(self):
        """Return "RequestInfo" instance to retry."""

        return self.request_info


class RequestInfo:
    """Class for expressing the request to REST API Server."""

    def __init__(self, url, data=None, headers={}, method=None, add_info=None):
        """Constructor."""

        self.url = url
        self.data = data
        self.headers = headers
        self.method = method
        self.add_info = add_info

    def get_url(self):
        """Return URL."""

        return self.url

    def get_data(self):
        """Return data."""

        return self.data

    def get_headers(self):
        """Return headers."""

        return self.headers

    def get_method(self):
        """Return method."""

        return self.method

    def get_add_info(self):
        """Return additional information.
           This is intended to be used for retry.
        """

        return self.add_info


class AccessInfo:
    """Abstract class for access to the server with REST API."""

    class Purpose:
        """Defining values used as "purpose" argument in
           "get_prepare_path_req_info" method.
        """

        ACCESS_DIRECTORY = 1
        MAKE_DIRECTORY = 2
        DELETE_DIRECTORY = 3
        RENAME_DIRECTORY = 4
        MOVE_DIRECTORY = 5
        ACCESS_FILE = 10
        DELETE_FILE = 11
        RENAME_FILE = 12
        MOVE_FILE = 13
        WRITE_FILE = 14
        MOVE_TO = 20

    def get_url_handlers(self):
        """Return a handler list to open URL for request.."""

        raise NotImplementedError

    def set_session_info(self, response=None):
        """Set session information which is in "response"."""

        raise NotImplementedError

    def set_path_info(self, response):
        """Set the path information which is in "response"."""

        raise NotImplementedError

    def set_create_path_info(self, path, response):
        """Set the path information which is in "response" of request
        for creating the "path".
        """

        raise NotImplementedError

    def to_content_list(self, response):
        """Convert "response" to the content list."""

        raise NotImplementedError

    def to_stat_info(self, response):
        """Convert "response" to the stat information."""

        raise NotImplementedError

    def handle_exception(self, exc, request_info, retry_count):
        """Handle "exc" exception."""

        raise exc

    def convert_path(self, path):
        """Convert charcter in "path" according to the server rules."""

        return path

    def compare_path(self, path, path_on_server):
        """Compare "path" and "path_on_server".
           "path" is converted according to the server rules.
        """

        return path == path_on_server

    def get_open_session_req_info(self):
        """Return the "RequestInfo" to open session."""

        raise NotImplementedError

    def get_close_session_req_info(self):
        """Return the "RequestInfo" to close session."""

        raise NotImplementedError

    def get_prepare_path_req_info(self, path, purpose):
        """Return the "RequestInfo" to prepare accesing a "path"."""

        raise NotImplementedError

    def get_list_contents_req_info(self, path):
        """Return the "RequestInfo" to list contents in "path" directory."""

        raise NotImplementedError

    def get_make_directory_req_info(self, path):
        """Return the "RequestInfo" to make "path" directory."""

        raise NotImplementedError

    def get_delete_directory_req_info(self, path):
        """Return the "RequestInfo" to delete "path" directory."""

        raise NotImplementedError

    def get_stat_directory_req_info(self, path):
        """Return the "RequestInfo" to get status of "path" directory."""

        raise NotImplementedError

    def get_rename_directory_req_info(self, path, new_name):
        """Return the "RequestInfo" to rename "path" directory."""

        raise NotImplementedError

    def get_move_directory_req_info(self, path, new_path):
        """Return the "RequestInfo" to move "path" directory."""

        raise NotImplementedError

    def get_delete_file_req_info(self, path):
        """Return the "RequestInfo" to delete "path" file."""

        raise NotImplementedError

    def get_stat_file_req_info(self, path):
        """Return the "RequestInfo" to get status of "path" file."""

        raise NotImplementedError

    def get_rename_file_req_info(self, path, new_name):
        """Return the "RequestInfo" to rename "path" file."""

        raise NotImplementedError

    def get_move_file_req_info(self, path, new_path):
        """Return the "RequestInfo" to move "path" file."""

        raise NotImplementedError

    def get_read_file_req_info(self, path):
        """Return the "RequestInfo" to read from "path" file."""

        raise NotImplementedError

    def get_write_file_req_info(self, path, data, length=0, overwrite=False):
        """Return the "RequestInfo" to write to "path" file."""

        raise NotImplementedError
