# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta
import os
import glob
import time
import re
import uuid
import errno
import subprocess as sp

import rapsexcept

from stat import S_ISDIR
from stat import ST_MTIME

class rapssession:

    SESSION_PATH = ""
    LIST_PATH = ""
    SESSION_EXT  = ".ses"
    FILELST_EXT  = ".lst"
    MAX_MEMORY   = 0

    c_comm = None

    def __init__(self, comm):
        '''
        Constructor
        '''
        self.c_comm = comm

    def setConfig(self):
        '''
        setting config values
        '''
        if self.c_comm == None:
            return
        if self.c_comm.CONFIG == None:
            return
        self._setSessionPath(self.c_comm.CONFIG.SESS_PATH)
        self._setListPath(self.c_comm.CONFIG.LIST_PATH, self.c_comm.CONFIG.MAX_MEMORY )
        return

    def _setSessionPath(self,path):
        '''
        setting session path
        '''
        self.SESSION_PATH = path.rstrip("/")
        self.SESSION_PATH += "/"
        return

    def _setListPath(self,path, maxmem):
        '''
        setting  list path
        '''
        self.LIST_PATH  = path.rstrip("/")
        self.LIST_PATH += "/"
        self.MAX_MEMORY = maxmem
        return

    def isCount(self):
        '''
        session file count
        '''
        lst = glob.glob( self._getfname( "*" ) )
        return len(lst)
        
    def create(self, session, sessdata):
        '''
        cleate session file
        '''
        n_result = self.c_comm.RESULT.RESULT_NO_ERROR

        # remove
        self.remove()

        # create session file
        try:
            fp = open( self._getfname(session), "w" )
            fp.write(sessdata)
            fp.close()

        except (IOError, OSError), e:
            if e.errno == errno.EACCES:
                n_result = self.c_comm.RESULT.RESULT_ERR_PERMISSION
            elif e.errno == errno.ENOSPC:
                n_result = self.c_comm.RESULT.RESULT_ERR_FILESYSTEM_FULL
            else:
                n_result = self.c_comm.RESULT.RESULT_ERR_WRITE

        except:
            n_result = self.c_comm.RESULT.RESULT_ERR_WRITE

        # parmission set
        try:
            os.chmod( self._getfname(session), 0666 )
        except:
            pass

        return n_result

    def delete(self,session):
        '''
        delete session file
        '''
        n_result = self.c_comm.RESULT.RESULT_NO_ERROR
        try:
            # session
            os.remove( self._getfname(session) )

        except (IOError, OSError), e:
            if  e.errno == errno.ENOENT:
                n_result = self.c_comm.RESULT.RESULT_NOT_FOUND
            elif e.errno == errno.EACCES:
                n_result = self.c_comm.RESULT.RESULT_ERR_PERMISSION
            else:
                n_result = self.c_comm.RESULT.RESULT_ERR_DELETE

        try:
            # file list
            os.remove( self._getlstname(session) )
        except:
            pass

        return n_result

    def remove( self, session="" ):
        '''
        remove session file
        '''
        n_result = self.c_comm.RESULT.RESULT_NO_ERROR
        if session == "":
            try:
                l_files = os.listdir( self.SESSION_PATH )
                for s_name in l_files:
                    s_file  = os.path.join( self.SESSION_PATH, s_name )
                    n_time  = os.stat( s_file )[ST_MTIME]
                    n_passd = int(time.time( )) - n_time
                    if n_passd > self.c_comm.CONFIG.TIME_SESSION:
                        # parse file name
                        s_session, s_ext = os.path.splitext(s_name)
                        if s_ext.lower() == self.SESSION_EXT:
                            # remove session
                            result = self.delete( s_session )
                            if n_result != self.c_comm.RESULT.RESULT_NO_ERROR:
                                n_result = result
            except:
                n_result = self.c_comm.RESULT.RESULT_ERR_DELETE

        else:
            try:
                n_time  = os.stat( self._getfname(session) )[ST_MTIME]
                n_passd = int(time.time( )) - n_time
                if n_passd > self.c_comm.CONFIG.TIME_SESSION:
                    # remove session
                    n_result = self.delete( session )
            except:
                n_result = self.c_comm.RESULT.RESULT_ERR_DELETE

        return n_result

    def check( self, session ):
        '''
        session check
        '''
        retCode = False

        # remove
        self.remove(session)

        # check
        try:
            fp = open( self._getfname(session), "r" )
            fp.close( )
            retCode = True
        except:
            pass

        if retCode == True:
            self._updatetime(session)
        
        return retCode

    def update( self, session ):
        '''
        session update
        '''
        if session != "":
            self._updatetime(session)
        
        return

    def getSessionData( self, session ):
        '''
        user name is acquired. 
        '''
        retData = ""
        try:
            fp = open( self._getfname(session), "r" )
            retData = fp.read()
            fp.close( )
        except:
            pass
        
        return retData

    def _updatetime(self, session):
        '''
        time stamp is updated. 
        '''
        try:
            os.utime( self._getfname(session), None )
        except:
            pass

    def _getfname(self, session):
        '''
        _getfname
        '''
        return self.SESSION_PATH + session + self.SESSION_EXT
    
    def _getlstname(self, session):
        '''
        _getlstname
        '''
        return self.LIST_PATH + session + self.FILELST_EXT

    def getSeesionid(self):
        '''
        creat session id
        '''
        return str(uuid.uuid4())

