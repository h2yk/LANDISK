# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta
import os
import sys
import shutil
import time
import logging

import rapsconfig
import traceback

from subprocess import Popen, PIPE

enable_encode  = [u"ascii", u"us", u"iso-8859-1", u"iso-8859-15", u"shift_jis", u"shift-jis", u"euc-jp", \
                  u"iso-2022-jp", u"iso-2022-jp-2", u"utf-8", u"utf-16be", u"utf-16le", u"utf-16"]
suffix_movie   = [u".3gp", u".mp4", u".m4v", u".mov", u".webm"]
suffix_picture = [u".jpg", u".jpeg", u".gif", u".bmp", u".png"]


class rapsresult():
    '''
    result code enum
    '''
    RESULT_NO_ERROR                 = 0
    RESULT_ERROR                    = 1
    RESULT_ERR_INTERNAL             = 2
    RESULT_NON_XML                  = 3
    RESULT_INVALID_XML              = 4
    RESULT_INVALID_REQUEST          = 5
    RESULT_INVALID_SESSION_ID       = 6
    RESULT_INVALID_OPTION           = 7
    RESULT_INVALID_URL              = 8
    RESULT_INVALID_ENCODING         = 9
    RESULT_ERR_AUTH                 = 10
    RESULT_ERR_EXCEED_SESSION_LIMIT = 11
    RESULT_NOT_FOUND                = 256
    RESULT_ERR_PERMISSION           = 257
    RESULT_ERR_OPEN                 = 258
    RESULT_ERR_NOT_DIR              = 259
    RESULT_ERR_IS_DIR               = 260
    RESULT_ERR_READ                 = 261
    RESULT_ERR_WRITE                = 262
    RESULT_ERR_DELETE               = 263
    RESULT_ERR_TOO_MANY_FILE        = 264
    RESULT_ERR_TOO_LARGE_FILE       = 265
    RESULT_ERR_FILESYSTEM_FULL      = 266
    RESULT_ERR_INVALID_FILE         = 267
    RESULT_ERR_EXIST                = 268


class rapscomm:
    '''
    Common processing function class 
    '''
    '''
    common value
    '''
    #CONFIG_FILE = "/mnt/hda5/conf/raps/raps.conf"
    CONFIG_FILE = "/mnt/data/conf/raps/raps.conf"

    '''
    result
    '''
    RESULT = rapsresult()
    
    '''
    conf
    '''
    CONFIG = rapsconfig.rapsconfig()
    
    '''
    proc
    '''
    def __init__(self):
        # 
        # Constructor
        #
        s_path = os.getenv( "RAPS_CONFIG" ) 
        if s_path != None:
            self.CONFIG_FILE = os.path.join(s_path, "raps.conf")
        
        return

    def readConfig(self):
        # 
        # Read config
        #
        result = self.CONFIG.read(self.CONFIG_FILE) 
        if result == True:
            # create raps dir
            self._make_work_dir()

            # setting logfile 
            if len(self.CONFIG.LOG) > 0:
                try:
                    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', filename=self.CONFIG.LOG, level=logging.DEBUG)
                    # debug
                    self.logout("*** config file ***")
                    self.logout(self.CONFIG_FILE)
                except:
                    pass

        return result

    def _make_work_dir(self):
        #
        # Creation of the working directory.
        #
        self.MakeDirs(self.CONFIG.SESS_PATH)
        self.MakeDirs(self.CONFIG.LIST_PATH)
        self.MakeDirs(self.CONFIG.LINK_PATH)
        self.MakeDirs(self.CONFIG.CACHE_PATH)
        self.MakeDirs(self.CONFIG.LOCK_PATH)
        return
    
    def sudo(self,args):
        #
        # external sudo command is started. 
        #
        retCode = 0    
        code = ""
        try:
            args.insert(0, "sudo")
            result = Popen(args,stdout=PIPE)
            buff = result.stdout.readline()
            while buff != "":
                code = buff.rstrip("\n")
                buff = result.stdout.readline()
            result.wait()
        except:
            traceback.print_exc(file=open(self.CONFIG.LOG,"w"))
            pass

        # retcode
        try:
            retCode = int(code)
        except:
            traceback.print_exc(file=open(self.CONFIG.LOG,"w"))
            pass

        return retCode
    
    def CmdExec(self, args):
        #
        # external command is started. 
        #
        retList = []

        try:
            result = Popen(args, stdout=PIPE)
            buff = result.stdout.readline()
            while buff != "":
                retList.append(buff.rstrip("\n"))
                buff = result.stdout.readline()
            result.wait()
        except:
            traceback.print_exc(file=open(self.CONFIG.LOG,"w"))
            pass
        
        return retList

    def CmdExec_nowait(self, args):
        #
        # external command is started. 
        #
        try:
            # process start
            Popen(args)
        except:
            raise
        return
    
    def MakeDirs(self, path):
        #
        # Creation of the directory.
        #
        # check already exists. 
        if os.path.exists(path) == True:
            return True

        # make dir
        try:
            os.makedirs(path)
        except:
            return False

        # set permittion
        try:
            os.chmod (path, self.CONFIG.DIRPERMISS)
        except:
            pass
        
        return True

    def RemoveDir(self, path):
        #
        # Directory is deleted the whole subdirectory. 
        #
        # delete dir
        try:
            os.removedirs( path )
        except OSError, e:
            if e.errno == 39:   # Directory not empty
                return True
            else:
                return False

        except:
            return False
        
        return True

    def RemoveDirFource(self, path):
        #
        # Directory is deleted the whole subdirectory. 
        #
        if os.path.exists(path) == False:
            return True
        
        # delete dir
        try:
            shutil.rmtree(path)
        except:
            return False
        
        return True

    def Remove(self, path):
        #
        # Directory is deleted the whole subdirectory. 
        #
        if os.path.exists(path) == False:
            return True
        
        # remove file
        try:    
            os.remove( path )
        except:
            return False
        
        return True

    def Move(self, src, dest):
        #
        # move file
        #
        try:
            shutil.move( src, dest )
        except:
            raise
        
        return True

    def IsExistNoCase(self, src):
        #
        # exist file no case
        #
        b_exist = False
        try:
            s_work = src.rstrip("/")
            s_path = os.path.dirname(s_work)
            s_file = os.path.basename(s_work).lower()
            files = os.listdir(s_path)
            for fname in files:
                if fname.lower() == s_file:
                    b_exist = True
                    break
        except:
            pass
        
        return b_exist

    def IsExistNoCase_ckdir(self, src):
        #
        # Is dir no case
        #
        b_exist = False
        b_dir   = False
        try:
            s_work = src.rstrip("/")
            s_path = os.path.dirname(s_work)
            s_file = os.path.basename(s_work).lower()
            files = os.listdir(s_path)
            for fname in files:
                if fname.lower() == s_file:
                    b_exist = True
                    s_work = os.path.join(s_path, fname)
                    if os.path.isdir(s_work) == True:
                        b_dir = True
                    break
        except:
            pass
        
        return b_exist, b_dir

    def GetNameNoCase(self, src):
        #
        # get no case file name
        #
        r_name = ""
        try:
            s_work = src.rstrip("/")
            s_path = os.path.dirname(s_work)
            s_file = os.path.basename(s_work)
            files = os.listdir(s_path)
            for fname in files:
                if fname.lower() == s_file.lower():
                    r_name = os.path.join(s_path, fname)
                    break
        except:
            pass
        
        if r_name == "":
            r_name = src

        return r_name

    def GetCurrent(self):
        #
        # Get current Directory 
        #
        s_path = ""
        try:
            s_path = os.path.realpath(os.path.dirname(sys.argv[0]))
        except:
            pass

        return s_path

    def GetRapsLibPath(self):
        #
        # Get RAPS Library Directory 
        #
        rapslibpath_file = os.path.abspath(__file__)
        rapslibpath = os.path.dirname(rapslibpath_file)
        return rapslibpath

    def Escape(self,sVal):
        sVal = sVal.replace("&", "&amp;")
        sVal = sVal.replace("<", "&lt;")
        sVal = sVal.replace(">", "&gt;")
        sVal = sVal.replace('"', "&quot;")
        sVal = sVal.replace("'", "&apos;")
        return sVal
    
    def logout(self, strMsg):

        if len(self.CONFIG.LOG) == 0:
            return
        try:
            logging.debug(strMsg)
        except:
            pass
        
        return
