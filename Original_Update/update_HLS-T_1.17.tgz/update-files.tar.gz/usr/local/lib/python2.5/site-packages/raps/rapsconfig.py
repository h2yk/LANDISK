# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta
'''
Config module.
'''
import ConfigParser

class rapsconfig:
    '''
    Config class    
    ''' 
    
    """ member value """
    COMMAND_PATH  = ""
    SHARE_PATH    = ""
    EXT_SHARE_PATH    = ""
    EXT_SHARE_LIST  = [] 
    SESS_PATH     = ""
    LIST_PATH     = ""
    LINK_PATH     = ""
    CACHE_PATH    = ""
    LOCK_PATH     = ""
    MAX_MEMORY    = 0
    MAX_SESSION   = 0
    TIME_SESSION  = 0
    EXIF_ENABLE   = 0
    THUMB_HEIGHT  = 0
    THUMB_WIDTH   = 0
    THUMB_COUNT   = 0
    THUMB_FILTER  = ""
    THUMB_TMP_DIR  = ""
    MAX_UPLOAD    = 0
    UPLOAD_TMP_DIR  = ""
    UPLOAD_TMP_NAME = ""
    MAX_DOWNLOAD  = 0
    TIME_WAIT     = 0
    PERMISSION    = 0666
    DIRPERMISS    = 0777
    LOG           = ""

    def __init__(self):
        """ Constructor """
   
    def read(self, config):
        #
        # configuration file is read.
        #
        cp = ConfigParser.ConfigParser()
        try:
            conf_file = open(config, "rb")
            cp.readfp(conf_file)
        except:
            return False
        
        """ read value """
        self.COMMAND_PATH = cp.get   ( "common", "command" )

        self.SHARE_PATH   = cp.get   ( "common", "share" )

        self.EXT_SHARE_PATH   = cp.get   ( "common", "ext_share" )

        ext_share_list    = cp.get   ( "common", "ext_share_list" )
        if ext_share_list:
            self.EXT_SHARE_LIST = ext_share_list.split(",")

        self.SESS_PATH    = cp.get   ( "common", "session" )

        self.LIST_PATH    = cp.get   ( "common", "list" )

        self.LINK_PATH   = cp.get   ( "common", "link" )

        self.CACHE_PATH   = cp.get   ( "common", "cache" )

        self.LOCK_PATH   = cp.get   ( "common", "lock" )

        try:
            self.MAX_MEMORY   = cp.getint( "common", "maxmem" )
        except:
            self.MAX_MEMORY   = 20

        try:
            self.MAX_SESSION  = cp.getint( "common", "maxsession" )
        except:
            self.MAX_SESSION  = 5

        try:
            self.TIME_SESSION  = cp.getint( "common", "sessiontime" )
        except:
            self.TIME_SESSION  = 30

        try:
            self.EXIF_ENABLE  = cp.getint( "image", "exif" )
        except:
            self.EXIF_ENABLE  = 1

        try:
            self.THUMB_WIDTH  = cp.getint( "image", "width" )
        except:
            self.THUMB_WIDTH  = 200

        try:
            self.THUMB_HEIGHT = cp.getint( "image", "height" )
        except:
            self.THUMB_HEIGHT = 100

        try:
            self.THUMB_COUNT  = cp.getint( "image", "count" )
        except:
            self.THUMB_COUNT  = 10000

        try:
            self.THUMB_FILTER = cp.get   ( "image", "filter" )
        except:
            self.THUMB_FILTER = "NEAREST"

        self.THUMB_TMP_DIR = cp.get( "image", "tmpdir" )

        try:
            self.MAX_UPLOAD = cp.getint( "upload", "maxsize" )
        except:
            self.MAX_UPLOAD = 2048

        self.UPLOAD_TMP_DIR = cp.get( "upload", "tmpdir" )

        self.UPLOAD_TMP_NAME = cp.get( "upload", "tmpname" )

        try:
            self.MAX_DOWNLOAD = cp.getint( "download",  "maxsize" )
        except:
            self.MAX_DOWNLOAD = 2048

        try:
            self.TIME_WAIT = cp.getint( "common",  "wait" )
        except:
            self.TIME_WAIT = 2

        try:
            self.PERMISSION = int( cp.get( "common",  "permission" ), 8 )
        except:
            self.PERMISSION = int( "0666", 8 )

        try:
            self.DIRPERMISS = int( cp.get( "common",  "dirpermiss" ), 8 )
        except:
            self.DIRPERMISS = int( "0777", 8 )

        try:
            self.LOG = cp.get( "common",  "log" )
        except:
            self.LOG = "/dev/null"
        
        # close
        conf_file.close()

        # Mbyte to Byte
        self.MAX_MEMORY *= 1048576
        self.MAX_UPLOAD *= 1048576
        self.MAX_DOWNLOAD *= 1048576

        # minute to second
        self.TIME_SESSION *= 60

        # value check
        if self.COMMAND_PATH == "" or self.SHARE_PATH == "" or self.SESS_PATH == "":
            return False
        
        if self.LIST_PATH == "" or self.LINK_PATH == "" or self.CACHE_PATH == "":
            return False

        return True
