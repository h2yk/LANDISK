# -*- mode: landisk-python; coding: utf-8; -*-
# vim:ts=4 sw=4 sts=4 ai si et sta

"""Request module.

Define classes and functions for processing XML request.
"""


import os
import sys

from iobase.xmldata import (etree, XmlNode, XmlConfNode, XmlConf,
                            ROOT_PATH, ANY_CHILD_PATH, ANY_CHILD_NAME)
from iobase.cmdexec import (CmdExec, PIPE, NULL)
from iobase.exception import (NotFoundError, InvalidArgError)


ENTRY_NAME = "entry"
OPTION_NAME = "option"
ENTRY_LIST_NAME = "entrylist"
ENTRY_PATH = ENTRY_LIST_NAME + "/" + ENTRY_NAME

DRY_RUN_ATTR = "dry_run"
DEBUG_ATTR = "debug"

_PY_SUFFIX = ".py"
_HANDLE_REQUEST_NAME = "handle_request"


class Entry:
    """Request Entry class."""

    TYPE_ATTR = "type"
    RESULT_ATTR = "result"
    FILE_ATTR = "file"
    ALTFILE_ATTR = "altfile"

    def __str__(self):
        """Translate XML data to string data and return it."""

        return self.entry.to_str()

    def __init__(self, type="", source="", encoding=None,
                    file_name=None, altfile_name=None, opt_attrs=None):
        """Constructor."""

        self.entry = XmlConfNode(ENTRY_NAME, encoding)
        self.entry.set_attrs({self.TYPE_ATTR: type})

        Entry.set(self, source)
        if file_name:
            self.set_file(file_name)
        if altfile_name:
            self.set_altfile(altfile_name)
        if opt_attrs:
            self.set_options(opt_attrs)

    def set(self, source):
        """Set the entry body data from "source".
           The "source" must be "Entry" instance or the value suppored
           by "XmlConfNode"'s constructor.
        """

        if isinstance(source, Entry):
            self.entry = source.entry
            return self

        if (isinstance(source, XmlNode) and
                source.get_node_name() == ENTRY_NAME):

            self.entry = source
            return self

        self.entry.delete_children(ANY_CHILD_NAME)
        body = XmlConfNode(source, self.entry.encoding)
        self.entry.encoding = body.encoding
        if body.node != None:
            self.entry.append_child(body)

        return self

    def get(self):
        """Return the entry body data."""

        return XmlConfNode(self.entry.get_node(ANY_CHILD_PATH))

    def get_clone(self, preserve_result=True, preserve_file=True):
        """Create the clone Entry instance and return it."""

        entry_node = self.entry.get_clone()

        if not preserve_result:
            entry_node.delete_attrs((self.RESULT_ATTR, ))

        if not preserve_file:
            entry_node.delete_attrs((self.FILE_ATTR, ))
            entry_node.delete_attrs((self.ALTFILE_ATTR, ))

        return Entry(source=entry_node)

    def get_type(self):
        """Return the value of "type" attribute on root node."""

        return self.entry.get_attr_value(self.TYPE_ATTR)

    def set_result(self, result):
        """Set the "result" in entry."""

        self.entry.set_attrs({self.RESULT_ATTR: result})
        return result

    def get_result(self):
        """Return the "result" in entry."""

        return self.entry.get_attr_value(self.RESULT_ATTR)

    def set_file(self, file_name):
        """Set the "file" in entry."""

        self.entry.set_attrs({self.FILE_ATTR: file_name})
        return file_name

    def get_file(self):
        """Return the "file" in entry."""

        return self.entry.get_attr_value(self.FILE_ATTR)

    def set_altfile(self, file_name):
        """Set the "altfile" of entry."""

        self.entry.set_attrs({self.ALTFILE_ATTR: file_name})
        return file_name

    def get_altfile(self):
        """Return the "altfile" in entry."""

        return self.entry.get_attr_value(self.ALTFILE_ATTR)

    def set_options(self, opt_attrs, root_name=""):
        """Set the attribute of option node."""

        try:
            body = self.get()
        except NotFoundError:
            if not len(root_name):
                raise

            self.set(root_name)
            body = self.get()

        try:
            option_node = body.get_node(OPTION_NAME)
        except NotFoundError:
            body.append_child(OPTION_NAME)
            option_node = body.get_node(OPTION_NAME)

        option_node.set_attrs(opt_attrs)
        return opt_attrs

    def get_options(self):
        """Return the attribute of option node."""

        try:
            return self.get().get_node(OPTION_NAME).get_attrs()
        except:
            return {}


class EntryList:
    """Request Entry List class."""

    def __init__(self, entrylist=None, encoding=None):
        """Constructor.

           Note:
               This function don't create the new "XmlConfNode" instance,
               if "entrylist" is specified and it is the "EntryList" instance
               or "XmlNode" instance and the name of root node is "entrylist".
        """

        if isinstance(entrylist, EntryList):
            self.entrylist = entrylist.entrylist
            return

        if (isinstance(entrylist, XmlNode) and
                entrylist.get_node_name() == ENTRY_LIST_NAME):

            self.entrylist = XmlConfNode(entrylist)
            return

        self.entrylist = XmlConfNode(ENTRY_LIST_NAME, encoding)

    def append_entry(self, entry):
        """Append request entry to the list."""

        self.entrylist.append_child(entry.entry)

    def insert_entry(self, entry, index=0):
        """Insert request entry to at given position."""

        self.entrylist.insert_child(index, entry.entry)

    def delete_entry(self, index=0):
        """Delete request entry from the list."""

        self.entrylist.delete_child(ANY_CHILD_NAME, index=index)

    def get_entry_list(self):
        """Return the Entry instance list."""

        entry_list = []
        for child in self.entrylist.get_node_list(ANY_CHILD_PATH):
            entry_list.append(Entry(source=child))

        return entry_list

    def get_entry(self, index=0):
        """Return the specified entry."""

        entry_list = self.get_entry_list()
        if len(entry_list) <= index:
            raise NotFoundError(index)

        return entry_list[index]


class ReqResDataBase:
    """Base class for Request/Response Data class."""

    def __str__(self):
        """Translate XML data to string data and return it."""

        return self.root.to_str()

    def __init__(self, root, entrylist=None, encoding=None,
            dry_run=None, debug=None):
        """Constructor."""

        self.root = root
        if entrylist == None:
            entrylist = EntryList(encoding=encoding)

        self.root.append_child(entrylist.entrylist)

        if dry_run != None:
            self.root.set_bool_attr(DRY_RUN_ATTR, dry_run)
        if debug != None:
            self.root.set_bool_attr(DEBUG_ATTR, debug)

    def get_entrylist(self):
        """Return the "EntryList" instance."""

        return EntryList(self.root.get_node(ENTRY_LIST_NAME))

    def get_entry_list(self):
        """Return the Entry instance list."""

        entry_list = []
        for child in self.root.get_node_list(ENTRY_PATH):
            entry_list.append(Entry(source=child))

        return entry_list

    def get_entry(self, index=0):
        """Return the specified entry."""

        entry_list = self.get_entry_list()
        if len(entry_list) <= index:
            raise NotFoundError(index)

        return entry_list[index]

    def is_dry_run(self):
        """Return if "dry_run" attribute is set to true."""

        return self.root.is_set_to_true(DRY_RUN_ATTR)

    def is_debug(self):
        """Return if "debug" attribute is set to true."""

        return self.root.is_set_to_true(DEBUG_ATTR)


class RequestData(ReqResDataBase):
    """Request Data class."""

    REQUEST_NAME = "request"

    def __init__(self, entries=None, encoding=None, dry_run=None,
            debug=None):
        """Constructor."""

        entrylist = None
        if (isinstance(entries, EntryList)):
            entrylist = entries

        ReqResDataBase.__init__(self, XmlConfNode(self.REQUEST_NAME, encoding),
                                entrylist, encoding, dry_run, debug)

        if (isinstance(entries, Entry)):
            self.get_entrylist().append_entry(entries)

    def load(self, source):
        """Load XML data from "source".
           The "source" must be the value supported by "XmlConf"'s "load".
        """

        xml_conf = XmlConf(source)
        if xml_conf.get_root_node().get_node_name() != self.REQUEST_NAME:
            raise InvalidArgError(source)

        try:
            xml_conf.get_root_node().get_node(ENTRY_LIST_NAME)
        except NotFoundError:
            raise InvalidArgError(source)

        self.root = xml_conf.get_root_node()

        return self


class ResponseData(ReqResDataBase):
    """Response Data class."""

    RESPONSE_NAME = "response"

    def __init__(self, request_data=None, encoding=None, entrylist=None):
        """Constructor."""

        if request_data and entrylist == None:
            entrylist_node = request_data.get_entrylist().entrylist
            entrylist = EntryList(entrylist_node.get_clone())

        ReqResDataBase.__init__(self,
                                XmlConfNode(self.RESPONSE_NAME, encoding),
                                entrylist, encoding)

        if request_data:
            self.root.set_attrs(request_data.root.get_attrs())

    def load(self, source):
        """Load XML data from "source".
           The "source" must be the value supported by "XmlConf"'s "load".
        """

        xml_conf = XmlConf(source)
        if xml_conf.get_root_node().get_node_name() != self.RESPONSE_NAME:
            raise InvalidArgError(source)

        try:
            xml_conf.get_root_node().get_node(ENTRY_LIST_NAME)
        except NotFoundError:
            raise InvalidArgError(source)

        self.root = xml_conf.get_root_node()

        return self

    def set(self, source):
        """Set "source" XML data for response to root node.
           The "source" must be the value supported by "XmlConfNode"'s "set".
        """

        self.root = XmlConfNode(source)


class Request:
    """Request Class."""

    def __add_args(self, args):
        """Add args to "self.target_args"."""

        if not len(args):
            return

        if isinstance(args, (list, tuple)):
            self.target_args += args
        else:
            self.target_args += (str(args),)

    def __get_mod_dir_list(self, mod_path):
        """Return a directory list for importing module."""

        mod_dir_list = [os.path.dirname(mod_path)]

        if os.path.islink(mod_path):
            mod_dir_list.append(os.path.dirname(os.path.realpath(mod_path)))

        return mod_dir_list

    def __get_handler_class(self, module):
        """Return the class for handling request."""

        for obj_name in dir(module):
            mod_attr = getattr(module, obj_name)
            if hasattr(mod_attr, _HANDLE_REQUEST_NAME):
                return mod_attr
        return None

    def __get_request_handler(self, mod_path):
        """Return the request handler class instance defined in "mod_path"."""

        mod_name = os.path.splitext(os.path.basename(mod_path))[0]
        mod_dir_list = self.__get_mod_dir_list(mod_path)

        sys.path[:0] = mod_dir_list

        try:
            module = __import__(mod_name, globals(), locals(), [])
            try:
                return self.__get_handler_class(module)(option=None)
            except:
                return self.__get_handler_class(module)()
        except:
            return None
        finally:
            del sys.path[0:len(mod_dir_list)]

    def __handle_request_by_handler(self, request_data):
        """Handle request by the request handler class instance."""

        if self.handler == None:
            return ""

        response_data = ResponseData()
        self.handler.handle_request(request_data, response_data)
        return response_data

    def __init__(self, target, filter_cmd=""):
        """Constructor."""

        self.target_args = []
        self.__add_args(filter_cmd)
        self.__add_args(target)
        self.handler = None

        if not len(filter_cmd) and target.endswith(_PY_SUFFIX):
            self.handler = self.__get_request_handler(target)

    def request(self, request_data, encoding=None, env=None,
            dry_run=None, debug=None):
        """Send "request_data" to target, receive "response" and return it.
           "request_data" is must be the instance of "RequestData",
           "EntryList", or "Entry".
        """

        stderr_to = NULL
        if (isinstance(request_data, EntryList) or
            isinstance(request_data, Entry)):

            request_data = RequestData(request_data, encoding, dry_run, debug)

        else:
            if dry_run != None:
                request_data.root.set_bool_attr(DRY_RUN_ATTR, dry_run)
            if debug != None:
                if debug:
                    stderr_to = None
                request_data.root.set_bool_attr(DEBUG_ATTR, debug)

        if self.handler:
            return self.__handle_request_by_handler(request_data)

        proc = str(request_data) | \
                CmdExec(self.target_args, stdout=PIPE, stderr=stderr_to,
                        close_fds=True, env=env)
        response_str = proc.stdout.read()

        if proc.wait() or not response_str:
            return None

        return ResponseData().load(response_str)
